"""
https://contest.yandex.ru/contest/22781/run-report/115206416/

-- ПРИНЦИП РАБОТЫ --
Реализована функция вычисления выражения,
записанного в обратной польской нотации (RPN), с использованием стека.
Каждый элемент входного массива обрабатывается поочередно:
- если элемент является числом, он добавляется в стек;
- если элемент является оператором, из стека извлекаются два "верхних" элемента,
  над ними выполняется операция, и результат помещается обратно в стек.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Корректность алгоритма основана на правилах RPN и работе стека:
- всякий раз, когда встречается оператор, в стеке находятся два операнда,
  или выводится один элемент с вершины стека;
- результат операции всегда помещается обратно в стек;
- в конце обработки входных элементов, в стеке останется единственное значение,
  которое и является результатом выражения.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Временная сложность алгоритма составляет приблизительно O(n),
где n - количество элементов во входном массиве.


-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Пространственную сложность можно оценить как O(n),
где n - количество элементов во входном массиве.
Переменными, использующимися для вычисления, можно пренебречь.
"""


def calc_rpn(arr):
    temp = []
    operands = ['+', '-', '*', '/']

    if not any(j in arr for j in operands):
        return arr[-1]

    for i in arr:
        if i not in operands:
            temp.append(int(i))
        else:
            b = temp.pop(-1)
            a = temp.pop(-1)
            operand = i
            match operand:
                case "+":
                    temp.append(a + b)
                case "-":
                    temp.append(a - b)
                case "*":
                    temp.append(a * b)
                case "/":
                    temp.append(a // b)
    output = temp[0]
    return output


def read_input():
    arr = list(input().strip().split())
    return arr


if __name__ == '__main__':
    arr = read_input()
    print(calc_rpn(arr))
